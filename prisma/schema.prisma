// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// schema.prisma

// User table
model User {
  user_id       Int             @id @default(autoincrement())
  username      String          @unique
  email         String          @unique
  password      String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  tasks         Task[]
  Note          Note[]
  CalendarEvent CalendarEvent[]
}

// Task table
model Task {
  task_id     Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String?
  status      String // You can use an enum for status (e.g., "todo", "in_progress", "completed")
  deadline    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  notes       Note[]
  user        User     @relation(fields: [user_id], references: [user_id])
}

// Note table
model Note {
  note_id     Int      @id @default(autoincrement())
  user_id     Int
  content     String
  timeframe   String // You can use an enum for timeframe (e.g., "daily", "weekly", "quarterly")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id])
  Task        Task?    @relation(fields: [taskTask_id], references: [task_id])
  taskTask_id Int?
}

// CalendarEvent table
model CalendarEvent {
  event_id    Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id])
}
