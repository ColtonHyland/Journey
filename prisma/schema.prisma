generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("NEON_URL_SHADOW")
}

model CalendarEvent {
  event_id       String    @id @default(cuid())
  userId         String
  title          String    @db.VarChar(100)
  description    String?
  event_datetime DateTime? @db.Timestamp(6)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  user           User      @relation(fields: [userId], references: [id])
}

model Goal {
  goal_id     String    @id @default(cuid())
  userId      String
  title       String    @db.VarChar(100)
  description String?
  due_date    DateTime  @db.Date
  status      String?   @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  user        User      @relation(fields: [userId], references: [id])
  tasks       Task[]
}

model Task {
  task_id       String    @id @default(cuid())
  goalId        String?
  userId        String
  title         String    @db.VarChar(100)
  description   String?
  status        String?   @db.VarChar(20)
  assigned_date DateTime  @default(now())
  start_time    DateTime  @db.Timestamp(6)  @default(now())
  end_time      DateTime  @db.Timestamp(6)  @default(now())
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  goal          Goal?     @relation(fields: [goalId], references: [goal_id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id])
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  calendarEvents CalendarEvent[]
  tasks          Task[]
  goals          Goal[]
  JournalEntry   JournalEntry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
